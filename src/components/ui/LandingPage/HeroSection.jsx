import React, { useEffect, useState, useCallback } from "react";
import AvatarLogo from "../../../assets/herosection main logo.png";
import { Calendar } from "primereact/calendar";
import "../../css/HeroSection.css";
import { useNavigate } from "react-router-dom";
import { motion } from "framer-motion";
import { SplitextAni } from "../../../functions/SpiltTextAnimation";
import Aos from "aos";
import "aos/dist/aos.css";

function HeroSection() {
  useEffect(() => {
    Aos.init({ once: true });

    // Optionally, refresh AOS to catch newly added elements or on rerender
    window.addEventListener("scroll", Aos.refresh);

    return () => {
      window.removeEventListener("scroll", Aos.refresh); // Cleanup listener on unmount
    };
  }, []);
  const [selectPet, setselectPet] = React.useState("");
  const [selectedPetNames, setSelectedPetNames] = useState("");
  const [selectedServices, setSelectedServices] = useState("");
  const [selectedServiceNames, setSelectedServiceNames] = useState("");
  const [error, setError] = useState({
    selectPet: "",
    selectedServices: "",
    date: "",
  });
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [location, setLocation] = useState("");
  const [dateData, setDateData] = useState("");

  const handleSubmit = useCallback(
    (e) => {

      e.preventDefault();

      if (!selectedPetNames || !selectedServiceNames) {
        setError({
          ...error,
          selectPet: !selectedPetNames ? "Please select pet type" : "",
          selectedServices: !selectedServiceNames
            ? "Please select a service"
            : "",
        });
        return;
      }

      // if (dateData !== "") {
      //   const date = new Date(dateData);
      //   const today = new Date();
      //   if (date < today) {
      //     setError({
      //       ...error,
      //       date: "Please select a future date",
      //     });
      //     return;
      //   }
      // }

      setLoading(true);

      fetch(
        `https://phplaravel-1332381-4877280.cloudwaysapps.com/api/search-host?pet_type=${selectedPetNames}&services=${selectedServiceNames}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        }
      )
        .then((response) => {
          if (!response.ok) {
            throw new Error("Network response was not ok");
          }
          return response.json();
        })
        .then((data) => {
          console.log(data);
          setLoading(false);
          // set in local storage
          localStorage.setItem("service", JSON.stringify(selectedServiceNames));
          localStorage.setItem("state", JSON.stringify({ data: data }));
          navigate("/searchlist", {
            state: {
              data: data,
              search: {
                selectedPetNames,
                selectedServiceNames,
                dateData,
                location,
              },
            },
            search: {
              selectPet,
              selectedServices,
              dateData,
              location,
            },
          });
        })
        .catch((error) => {
          console.error("There was a problem with the fetch operation:", error);
          setLoading(false);
        });
    },
    [selectedPetNames, selectedServiceNames, navigate]
  );

  // const handleSubmit = (e) => {
  //   e.preventDefault();

  //   if (!selectedPetNames || !selectedServiceNames) {
  //     setError({
  //       ...error,
  //       selectPet: !selectedPetNames ? "Please select pet type" : "",
  //       selectedServices: !selectedServiceNames
  //         ? "Please select a service"
  //         : "",
  //     });
  //     return;
  //   }

  //   if (dateData !== "") {
  //     const date = new Date(dateData);
  //     const today = new Date();
  //     if (date < today) {
  //       setError({
  //         ...error,
  //         date: "Please select a future date",
  //       });
  //       return;
  //     }
  //   }

  //   setLoading(true);

  //   fetch(
  //     `https://phplaravel-1332381-4877280.cloudwaysapps.com/api/search-host?pet_type=${selectedPetNames}&services=${selectedServiceNames}`,
  //     {
  //       method: "GET",
  //       headers: {
  //         "Content-Type": "application/json",
  //       },
  //     }
  //   )
  //     .then((response) => {
  //       if (!response.ok) {
  //         throw new Error("Network response was not ok");
  //       }
  //       return response.json();
  //     })
  //     .then((data) => {
  //       console.log(data);
  //       setLoading(false);
  //       // set in local storage
  //       localStorage.setItem("service", JSON.stringify(selectedServiceNames));
  //       navigate("/searchlist", {
  //         state: {
  //           data: data,
  //           search: {
  //             selectedPetNames,
  //             selectedServiceNames,
  //             dateData,
  //             location,
  //           },
  //         },
  //         search: {
  //           selectPet,
  //           selectedServices,
  //           dateData,
  //           location,
  //         },
  //       });
  //     })
  //     .catch((error) => {
  //       console.error("There was a problem with the fetch operation:", error);
  //       setLoading(false);
  //     });
  // };

  return (
    <section className="banner ">
      <div className="container-fluid">
        <div className="row flex-column flex-lg-row w-100 mx-auto">
          <div className="col-md-12 col-lg-6 col-xl-6 g-0 col-sm-12 castom-width-left">
            <div className="form-heading-wrapper">
              <div className="banner-title-wrapper">
                <h1>Find Trusted Pet Sitters & Dog Walkers</h1>
                <p className="mb-2">
                  Professional pet boarding, sitting, and walking services,
                  because they deserve the best care.
                </p>
              </div>
              <div
                className="form-wrapper"
                // data-aos="fade-right"
                // data-aos-offset="0"
                // data-aos-easing="ease-in-sine"
                // data-aos-duration="1000"
              >
                <form
                  className="form-control p-3 d-flex flex-column gap-3"
                  onSubmit={handleSubmit}
                >
                  <div className="form-check-container-parent">
                    <p>Select Your Pet</p>
                    <div className="form-check-container-parent-wrapper">
                      <input
                        type="checkbox"
                        id="Dog"
                        name="0"
                        className="hidden-input"
                        onChange={(e) => {
                          setselectPet("Dog");
                          setSelectedPetNames(e.target.name);
                        }}
                      />
                      <label
                        htmlFor="Dog"
                        className={`form-check-container ${
                          selectPet === "Dog" ? "active-form" : ""
                        }`}
                      >
                        <div className="form-check-sub-container">
                          <div className="cursor-pointer">
                            <svg
                              width="24"
                              height="24"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                              cursor={"pointer"}
                            >
                              <path
                                d="M9.56272 13.125C9.56272 13.3104 9.50773 13.4917 9.40472 13.6458C9.30171 13.8 9.15529 13.9202 8.98398 13.9911C8.81268 14.0621 8.62418 14.0807 8.44232 14.0445C8.26046 14.0083 8.09342 13.919 7.96231 13.7879C7.83119 13.6568 7.74191 13.4898 7.70573 13.3079C7.66956 13.126 7.68812 12.9375 7.75908 12.7662C7.83004 12.5949 7.9502 12.4485 8.10437 12.3455C8.25854 12.2425 8.4398 12.1875 8.62522 12.1875C8.87386 12.1875 9.11231 12.2863 9.28813 12.4621C9.46394 12.6379 9.56272 12.8764 9.56272 13.125ZM15.3752 12.1875C15.1898 12.1875 15.0085 12.2425 14.8544 12.3455C14.7002 12.4485 14.58 12.5949 14.5091 12.7662C14.4381 12.9375 14.4196 13.126 14.4557 13.3079C14.4919 13.4898 14.5812 13.6568 14.7123 13.7879C14.8434 13.919 15.0105 14.0083 15.1923 14.0445C15.3742 14.0807 15.5627 14.0621 15.734 13.9911C15.9053 13.9202 16.0517 13.8 16.1547 13.6458C16.2577 13.4917 16.3127 13.3104 16.3127 13.125C16.3127 12.8764 16.2139 12.6379 16.0381 12.4621C15.8623 12.2863 15.6239 12.1875 15.3752 12.1875ZM21.5412 13.1925C21.3679 13.2719 21.1796 13.3131 20.989 13.3134C20.8158 13.3131 20.6446 13.2778 20.4854 13.2096C20.3262 13.1415 20.1825 13.0419 20.0627 12.9169V17.25C20.0627 18.1948 19.6874 19.101 19.0193 19.7691C18.3512 20.4372 17.445 20.8125 16.5002 20.8125H7.50022C6.55538 20.8125 5.64925 20.4372 4.98115 19.7691C4.31305 19.101 3.93772 18.1948 3.93772 17.25V12.9169C3.81764 13.0417 3.67367 13.141 3.51437 13.209C3.35507 13.277 3.18372 13.3122 3.01053 13.3125C2.82025 13.312 2.63228 13.2708 2.45928 13.1916C2.18926 13.073 1.96777 12.8659 1.83141 12.6044C1.69504 12.3429 1.65196 12.0427 1.70928 11.7534L3.24866 3.50343C3.28165 3.32752 3.35027 3.16022 3.45031 3.01181C3.55034 2.8634 3.67967 2.73701 3.83035 2.64043C3.98103 2.54384 4.14987 2.47909 4.32649 2.45015C4.50311 2.42122 4.68379 2.42872 4.85741 2.47218L4.87991 2.47875L9.83084 3.9375H14.1696L19.1187 2.48343L19.1412 2.47687C19.3148 2.43341 19.4954 2.42591 19.6721 2.45484C19.8487 2.48377 20.0175 2.54853 20.1682 2.64511C20.3189 2.7417 20.4482 2.86809 20.5483 3.0165C20.6483 3.16491 20.7169 3.33221 20.7499 3.50812L22.2893 11.7581C22.346 12.0466 22.3028 12.3458 22.1668 12.6065C22.0309 12.8672 21.8102 13.0739 21.5412 13.1925ZM8.80147 4.80656L4.57897 3.5625C4.55519 3.55691 4.53052 3.55628 4.50649 3.56064C4.48246 3.56499 4.45959 3.57424 4.43928 3.58781C4.41782 3.60172 4.39942 3.61987 4.38524 3.64115C4.37105 3.66244 4.36137 3.6864 4.35678 3.71156L2.81741 11.9616C2.80943 12.0029 2.8156 12.0457 2.83491 12.0831C2.85423 12.1205 2.88557 12.1503 2.92389 12.1678C2.96221 12.1852 3.00528 12.1892 3.04616 12.1792C3.08705 12.1692 3.12337 12.1457 3.14928 12.1125L8.80147 4.80656ZM18.9377 17.25V11.4778L13.9746 5.0625H10.0258L5.06272 11.4778V17.25C5.06272 17.8965 5.31953 18.5165 5.77665 18.9736C6.23377 19.4307 6.85375 19.6875 7.50022 19.6875H11.4377V18.2325L10.1027 16.8975C10.0034 16.7909 9.94926 16.6498 9.95184 16.5041C9.95441 16.3584 10.0134 16.2193 10.1165 16.1163C10.2196 16.0132 10.3586 15.9542 10.5043 15.9516C10.6501 15.949 10.7911 16.0031 10.8977 16.1025L12.0002 17.2041L13.1027 16.1025C13.2093 16.0031 13.3504 15.949 13.4961 15.9516C13.6418 15.9542 13.7809 16.0132 13.8839 16.1163C13.987 16.2193 14.046 16.3584 14.0486 16.5041C14.0512 16.6498 13.9971 16.7909 13.8977 16.8975L12.5627 18.2325V19.6875H16.5002C17.1467 19.6875 17.7667 19.4307 18.2238 18.9736C18.6809 18.5165 18.9377 17.8965 18.9377 17.25ZM21.1877 11.9625L19.6483 3.7125C19.6436 3.6875 19.6339 3.66372 19.6197 3.64261C19.6055 3.6215 19.5872 3.60349 19.5658 3.58968C19.5241 3.56391 19.4742 3.55486 19.4262 3.56437L15.2074 4.80468L20.8624 12.1172C20.8894 12.1476 20.9255 12.1684 20.9653 12.1765C21.0051 12.1846 21.0465 12.1795 21.0832 12.1621C21.1199 12.1446 21.1499 12.1157 21.1688 12.0797C21.1876 12.0438 21.1943 12.0026 21.1877 11.9625Z"
                                fill={`${
                                  selectPet === "Dog" ? "white" : "#263542"
                                }`}
                                className="svg-icon-fill"
                              />
                            </svg>

                            <p>Dog</p>
                          </div>
                        </div>
                      </label>

                      <input
                        type="checkbox"
                        id="Cat"
                        name="1"
                        className="hidden-input"
                        onClick={(e) => {
                          setselectPet("Cat");
                          setSelectedPetNames(e.target.name);
                        }}
                      />
                      <label
                        htmlFor="Cat"
                        className={`form-check-container ${
                          selectPet === "Cat" ? "active-form" : ""
                        }`}
                      >
                        <div className="form-check-sub-container">
                          <div className="cursor-pointer">
                            <svg
                              width="24"
                              height="24"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                              cursor={"pointer"}
                            >
                              <path
                                d="M20.7525 3.28781C20.5129 3.188 20.2492 3.16145 19.9945 3.21151C19.7399 3.26157 19.5058 3.386 19.3219 3.56906L19.2947 3.59718L17.5706 5.58562C15.912 4.50936 13.9772 3.93661 12 3.93661C10.0228 3.93661 8.08797 4.50936 6.42938 5.58562L4.70531 3.60093L4.67813 3.57281C4.49463 3.38929 4.26084 3.26429 4.00631 3.21361C3.75179 3.16293 3.48795 3.18884 3.24815 3.28807C3.00835 3.3873 2.80335 3.5554 2.65906 3.77111C2.51477 3.98683 2.43767 4.24047 2.4375 4.5V12.75C2.4375 17.6091 6.7275 21.5625 12 21.5625C17.2725 21.5625 21.5625 17.6091 21.5625 12.75V4.5C21.5624 4.2405 21.4855 3.98685 21.3413 3.77109C21.1971 3.55534 20.9922 3.38716 20.7525 3.28781ZM20.4375 12.75C20.4375 16.8169 16.9538 20.1562 12.5625 20.4197V18.2325L13.8975 16.8975C14.0016 16.7918 14.0598 16.6492 14.0593 16.5008C14.0588 16.3524 13.9996 16.2102 13.8948 16.1052C13.7899 16.0003 13.6478 15.941 13.4994 15.9403C13.351 15.9396 13.2083 15.9976 13.1025 16.1016L12 17.2041L10.8975 16.1016C10.7917 15.9976 10.649 15.9396 10.5006 15.9403C10.3522 15.941 10.2101 16.0003 10.1053 16.1052C10.0004 16.2102 9.94125 16.3524 9.94074 16.5008C9.94022 16.6492 9.99836 16.7918 10.1025 16.8975L11.4375 18.2325V20.4197C7.04625 20.1562 3.5625 16.8169 3.5625 12.75V4.5C3.56123 4.46267 3.57167 4.42589 3.59235 4.39479C3.61302 4.36369 3.64291 4.33983 3.67781 4.32656C3.70225 4.31659 3.7283 4.31118 3.75469 4.31062C3.79854 4.31092 3.84069 4.32765 3.87281 4.3575L5.91281 6.70125C6.00581 6.80831 6.13581 6.87629 6.27679 6.89159C6.41777 6.90688 6.55933 6.86837 6.67313 6.78375C7.21958 6.38138 7.81184 6.04528 8.4375 5.7825V8.25C8.4375 8.39918 8.49676 8.54225 8.60225 8.64774C8.70774 8.75323 8.85082 8.8125 9 8.8125C9.14918 8.8125 9.29226 8.75323 9.39775 8.64774C9.50324 8.54225 9.5625 8.39918 9.5625 8.25V5.39156C10.1751 5.22327 10.8034 5.11896 11.4375 5.08031V8.25C11.4375 8.39918 11.4968 8.54225 11.6023 8.64774C11.7077 8.75323 11.8508 8.8125 12 8.8125C12.1492 8.8125 12.2923 8.75323 12.3977 8.64774C12.5032 8.54225 12.5625 8.39918 12.5625 8.25V5.08031C13.1966 5.11896 13.8249 5.22327 14.4375 5.39156V8.25C14.4375 8.39918 14.4968 8.54225 14.6023 8.64774C14.7077 8.75323 14.8508 8.8125 15 8.8125C15.1492 8.8125 15.2923 8.75323 15.3977 8.64774C15.5032 8.54225 15.5625 8.39918 15.5625 8.25V5.7825C16.1884 6.04676 16.7807 6.38444 17.3269 6.78843C17.4407 6.87305 17.5822 6.91157 17.7232 6.89627C17.8642 6.88098 17.9942 6.81299 18.0872 6.70593L20.1272 4.36218C20.1541 4.33884 20.1871 4.32365 20.2223 4.31839C20.2576 4.31312 20.2936 4.31801 20.3261 4.33247C20.3587 4.34693 20.3865 4.37037 20.4062 4.40003C20.4259 4.4297 20.4368 4.46438 20.4375 4.5V12.75ZM8.8125 13.125C8.8125 13.3104 8.75752 13.4917 8.6545 13.6458C8.55149 13.8 8.40507 13.9202 8.23377 13.9911C8.06246 14.0621 7.87396 14.0807 7.6921 14.0445C7.51025 14.0083 7.3432 13.919 7.21209 13.7879C7.08098 13.6568 6.99169 13.4898 6.95551 13.3079C6.91934 13.126 6.93791 12.9375 7.00886 12.7662C7.07982 12.5949 7.19998 12.4485 7.35415 12.3455C7.50832 12.2425 7.68958 12.1875 7.875 12.1875C8.12364 12.1875 8.3621 12.2863 8.53791 12.4621C8.71373 12.6379 8.8125 12.8764 8.8125 13.125ZM17.0625 13.125C17.0625 13.3104 17.0075 13.4917 16.9045 13.6458C16.8015 13.8 16.6551 13.9202 16.4838 13.9911C16.3125 14.0621 16.124 14.0807 15.9421 14.0445C15.7602 14.0083 15.5932 13.919 15.4621 13.7879C15.331 13.6568 15.2417 13.4898 15.2055 13.3079C15.1693 13.126 15.1879 12.9375 15.2589 12.7662C15.3298 12.5949 15.45 12.4485 15.6042 12.3455C15.7583 12.2425 15.9396 12.1875 16.125 12.1875C16.3736 12.1875 16.6121 12.2863 16.7879 12.4621C16.9637 12.6379 17.0625 12.8764 17.0625 13.125Z"
                                fill={`${
                                  selectPet === "Cat" ? "white" : "#263542"
                                }`}
                                className="svg-icon-fill"
                              />
                            </svg>

                            <p>Cat</p>
                          </div>
                        </div>
                      </label>
                    </div>
                    {error.selectPet && (
                      <p className="error-message">{error.selectPet}</p>
                    )}
                  </div>
                  <div className="form-check-container-parent">
                    <p>Select Services</p>
                    <div className="form-check-container-parent-wrapper">
                      <input
                        type="checkbox"
                        id="boarding"
                        name="1"
                        className="hidden-input"
                        onChange={(e) => {
                          setSelectedServices("boarding");
                          setSelectedServiceNames(e.target.name);
                        }}
                      />
                      <label
                        htmlFor="boarding"
                        className={`form-check-container ${
                          selectedServices.includes("boarding")
                            ? "active-form"
                            : ""
                        }`}
                      >
                        <div className="form-check-sub-container">
                          <div className="cursor-pointer">
                            <svg
                              width="22"
                              height="22"
                              viewBox="0 0 22 22"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M2.75 11C2.75 14.4567 2.75 18.0189 3.95817 19.0923C5.16633 20.1667 7.1115 20.1667 11 20.1667C14.8885 20.1667 16.8337 20.1667 18.0418 19.0923C19.25 18.018 19.25 14.4567 19.25 11"
                                stroke={`${
                                  selectedServices.includes("boarding")
                                    ? "white"
                                    : "#263542"
                                }`}
                                className="svg-icon-fill"
                                stroke-width="1.2"
                              />
                              <path
                                d="M13.4385 13.0185L19.12 11.3135C19.4958 11.2007 19.6847 11.1448 19.824 11.033C19.9457 10.935 20.0404 10.8075 20.099 10.6627C20.1668 10.4977 20.1668 10.3006 20.1668 9.90733C20.1668 8.36 20.1668 7.58725 19.8643 6.99692C19.6014 6.48333 19.1835 6.06548 18.6699 5.8025C18.0796 5.5 17.3068 5.5 15.7595 5.5H6.24083C4.6935 5.5 3.92075 5.5 3.33041 5.8025C2.81683 6.06548 2.39897 6.48333 2.136 6.99692C1.8335 7.58725 1.8335 8.36 1.8335 9.90733C1.8335 10.3006 1.8335 10.4967 1.90041 10.6627C1.95901 10.8075 2.05368 10.935 2.17541 11.033C2.31566 11.1448 2.50358 11.2008 2.88125 11.3144L8.56183 13.0185"
                                stroke={`${
                                  selectedServices.includes("boarding")
                                    ? "white"
                                    : "#263542"
                                }`}
                                className="svg-icon-fill"
                                stroke-width="1.2"
                              />
                              <path
                                d="M8.40576 3.66666C8.59515 3.12993 8.94636 2.66515 9.41098 2.33639C9.8756 2.00763 10.4308 1.83109 10.9999 1.83109C11.5691 1.83109 12.1243 2.00763 12.5889 2.33639C13.0535 2.66515 13.4047 3.12993 13.5941 3.66666M12.8333 11.4583H9.1666C9.04504 11.4583 8.92846 11.5066 8.8425 11.5926C8.75655 11.6785 8.70826 11.7951 8.70826 11.9167V13.8985C8.70828 13.99 8.73571 14.0795 8.78701 14.1553C8.83831 14.2311 8.91113 14.2898 8.9961 14.3238L9.63776 14.5805C10.5122 14.9304 11.4877 14.9304 12.3621 14.5805L13.0038 14.3238C13.0887 14.2898 13.1615 14.2311 13.2128 14.1553C13.2641 14.0795 13.2916 13.99 13.2916 13.8985V11.9167C13.2916 11.7951 13.2433 11.6785 13.1574 11.5926C13.0714 11.5066 12.9548 11.4583 12.8333 11.4583Z"
                                stroke={`${
                                  selectedServices.includes("boarding")
                                    ? "white"
                                    : "#263542"
                                }`}
                                className="svg-icon-fill"
                                stroke-width="1.2"
                                stroke-linecap="round"
                              />
                            </svg>

                            <p>Boarding</p>
                          </div>
                        </div>
                      </label>
                      <input
                        type="checkbox"
                        id="house-sitting"
                        name="2"
                        className="hidden-input"
                        onChange={(e) => {
                          setSelectedServices("house-sitting");
                          setSelectedServiceNames(e.target.name);
                        }}
                      />
                      <label
                        htmlFor="house-sitting"
                        className={`form-check-container ${
                          selectedServices.includes("house-sitting")
                            ? "active-form"
                            : ""
                        }`}
                      >
                        <div className="form-check-sub-container">
                          <div className="cursor-pointer">
                            <svg
                              width="22"
                              height="22"
                              viewBox="0 0 22 22"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M20.3351 10.8496L12.0336 2.55234L11.4771 1.99589C11.3504 1.86994 11.1789 1.79926 11.0002 1.79926C10.8215 1.79926 10.65 1.86994 10.5232 1.99589L1.66523 10.8496C1.53531 10.979 1.43264 11.1331 1.36327 11.3029C1.2939 11.4726 1.25923 11.6545 1.26132 11.8379C1.26991 12.5941 1.89941 13.1978 2.65566 13.1978H3.56874V20.1953H18.4316V13.1978H19.3641C19.7314 13.1978 20.0773 13.0539 20.3373 12.7939C20.4653 12.6663 20.5667 12.5146 20.6357 12.3476C20.7046 12.1805 20.7398 12.0014 20.7391 11.8207C20.7391 11.4555 20.5951 11.1096 20.3351 10.8496ZM12.2033 18.6484H9.79706V14.2656H12.2033V18.6484ZM16.8848 11.651V18.6484H13.5783V13.75C13.5783 13.2752 13.1937 12.8906 12.7189 12.8906H9.28144C8.80663 12.8906 8.42206 13.2752 8.42206 13.75V18.6484H5.11562V11.651H3.05312L11.0023 3.7082L11.4986 4.20449L18.9494 11.651H16.8848Z"
                                fill={`${
                                  selectedServices.includes("house-sitting")
                                    ? "white"
                                    : "#263542"
                                }`}
                                className="svg-icon-fill"
                              />
                            </svg>

                            <p>House Sitting</p>
                          </div>
                        </div>
                      </label>
                      <input
                        type="checkbox"
                        id="day-care"
                        name="3"
                        className="hidden-input"
                        onChange={(e) => {
                          setSelectedServices("day-care");
                          setSelectedServiceNames(e.target.name);
                        }}
                      />
                      <label
                        htmlFor="day-care"
                        className={`form-check-container ${
                          selectedServices.includes("day-care")
                            ? "active-form"
                            : ""
                        }`}
                      >
                        <div className="form-check-sub-container">
                          <div className="cursor-pointer">
                            <svg
                              width="24"
                              height="18"
                              viewBox="0 0 24 18"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <g clip-path="url(#clip0_14239_542)">
                                <path
                                  d="M4.31005 17.9992H4.26275C3.11964 17.9992 2.02334 17.5168 1.21504 16.6579C0.406737 15.7991 -0.0473633 14.6343 -0.0473633 13.4197C-0.0473633 12.2052 0.406737 11.0404 1.21504 10.1815C2.02334 9.32273 3.11964 8.84024 4.26275 8.84024H4.31287H4.31005C4.3764 8.84024 4.44346 8.84549 4.50981 8.84924C5.52205 6.94049 7.41734 5.67299 9.59146 5.67299C10.4766 5.67152 11.3503 5.88576 12.1453 6.29924L12.1108 6.28349C12.5105 5.82468 12.9959 5.45941 13.5359 5.21099L13.5635 5.19974C14.0799 4.96428 14.6363 4.84429 15.1983 4.84724C16.1305 4.8468 17.0364 5.17637 17.7727 5.78389C18.509 6.39141 19.0339 7.24226 19.2643 8.20205C19.4948 9.16183 19.4177 10.1758 19.0453 11.0839C18.673 11.992 18.0264 12.7423 17.2079 13.2165L17.186 13.2285C17.466 13.6988 17.622 14.2403 17.6378 14.7965C17.6537 15.3527 17.5287 15.9032 17.2761 16.3906C17.0234 16.878 16.6523 17.2845 16.2014 17.5676C15.7505 17.8506 15.2364 18 14.7126 18H14.7077L4.31005 17.9992ZM1.19499 13.419C1.1963 14.2964 1.52491 15.1374 2.10881 15.7578C2.69272 16.3782 3.48428 16.7274 4.31005 16.7287H14.7091C14.9886 16.7286 15.2639 16.6569 15.5117 16.5195C15.7595 16.3822 15.9724 16.1833 16.1324 15.9398C16.2923 15.6963 16.3946 15.4154 16.4305 15.1209C16.4665 14.8264 16.435 14.5271 16.3387 14.2483C16.2425 13.9695 16.0843 13.7196 15.8777 13.5196C15.671 13.3197 15.422 13.1757 15.1518 13.0999C14.8816 13.0241 14.5982 13.0187 14.3256 13.0842C14.053 13.1496 13.7993 13.2841 13.586 13.476L13.5889 13.4737C13.529 13.5277 13.4598 13.5685 13.3851 13.594C13.3104 13.6195 13.2317 13.6291 13.1535 13.6223C13.0753 13.6155 12.9991 13.5924 12.9293 13.5543C12.8595 13.5162 12.7975 13.4638 12.7468 13.4002C12.696 13.3367 12.6575 13.2631 12.6335 13.1837C12.6096 13.1043 12.6005 13.0207 12.6069 12.9376C12.6134 12.8546 12.6351 12.7736 12.671 12.6995C12.7068 12.6253 12.7561 12.5594 12.8159 12.5055L12.8173 12.5047C13.2105 12.1506 13.6849 11.9136 14.1924 11.8177L14.21 11.8147C14.2036 10.7681 13.8823 9.75117 13.293 8.91247C12.7038 8.07377 11.8775 7.45732 10.9349 7.15324C9.99235 6.84916 8.98296 6.8734 8.05429 7.2224C7.12561 7.5714 6.32635 8.22687 5.77334 9.09299L5.76275 9.11024C6.21432 9.28102 6.63588 9.5307 7.01005 9.84899L7.00158 9.84224C7.06276 9.8944 7.11367 9.95884 7.15141 10.0319C7.18915 10.105 7.21298 10.1852 7.22153 10.268C7.23009 10.3509 7.2232 10.4347 7.20126 10.5147C7.17933 10.5947 7.14278 10.6694 7.0937 10.7344C7.04461 10.7994 6.98396 10.8535 6.9152 10.8936C6.84644 10.9337 6.77092 10.959 6.69295 10.9681C6.61498 10.9772 6.53609 10.9698 6.46078 10.9465C6.38548 10.9232 6.31523 10.8844 6.25405 10.8322L6.25546 10.833C5.70814 10.3621 5.02486 10.106 4.32064 10.1077H4.31217C3.48591 10.1085 2.6944 10.4575 2.11002 11.0782C1.52564 11.6988 1.19682 12.5404 1.1957 13.4182L1.19499 13.419ZM14.0286 6.36899C13.6919 6.52499 13.4032 6.72899 13.1548 6.97874L13.1562 6.97724C13.8564 7.55341 14.4232 8.29223 14.8131 9.13711C15.2031 9.98199 15.4058 10.9105 15.4058 11.8515V11.8635C15.7446 11.9535 16.0425 12.0937 16.3093 12.2805L16.298 12.273C17.4169 11.7922 18.1912 10.6477 18.1912 9.31049C18.1912 8.49631 17.8979 7.713 17.3716 7.12126C16.8452 6.52952 16.1257 6.17422 15.3606 6.12824H15.3529C15.2969 6.12474 15.2409 6.12299 15.1849 6.12299H15.1778C14.7765 6.12266 14.3793 6.20891 14.0103 6.37649L14.0286 6.36899ZM20.203 16.1955L18.7757 14.508C18.6698 14.3828 18.6151 14.218 18.6236 14.0499C18.6321 13.8818 18.703 13.7242 18.8209 13.6117C18.9387 13.4993 19.0938 13.4411 19.252 13.4501C19.4102 13.4591 19.5585 13.5345 19.6644 13.6597L19.6651 13.6605L21.0924 15.3502C21.1448 15.4122 21.1852 15.4846 21.2113 15.5632C21.2374 15.6418 21.2487 15.7251 21.2445 15.8083C21.2403 15.8915 21.2207 15.9731 21.1869 16.0483C21.153 16.1234 21.1056 16.1908 21.0472 16.2465C20.9889 16.3022 20.9208 16.3451 20.8468 16.3729C20.7728 16.4006 20.6944 16.4126 20.6161 16.4081C20.5378 16.4037 20.461 16.3829 20.3903 16.3469C20.3195 16.3109 20.2561 16.2605 20.2037 16.1985L20.203 16.1977V16.1955ZM23.318 10.413L21.1842 10.29C21.1029 10.2898 21.0225 10.272 20.9479 10.2377C20.8733 10.2034 20.8061 10.1533 20.7503 10.0905C20.6945 10.0277 20.6513 9.95345 20.6234 9.87234C20.5955 9.79123 20.5835 9.70493 20.588 9.6187C20.5925 9.53247 20.6135 9.44812 20.6497 9.37079C20.6859 9.29346 20.7365 9.22478 20.7985 9.16892C20.8605 9.11306 20.9325 9.07121 21.0102 9.04591C21.088 9.0206 21.1697 9.01238 21.2505 9.02174H21.2491L23.383 9.14474C23.5356 9.15772 23.6776 9.23237 23.78 9.35332C23.8823 9.47427 23.937 9.6323 23.933 9.79487C23.9289 9.95744 23.8663 10.1122 23.7581 10.2271C23.6498 10.3421 23.5042 10.4087 23.3512 10.413H23.318ZM19.238 5.44799C19.1854 5.38609 19.1448 5.31373 19.1186 5.23507C19.0924 5.15642 19.0811 5.07303 19.0853 4.98972C19.0896 4.9064 19.1093 4.82481 19.1434 4.74964C19.1775 4.67447 19.2253 4.60721 19.2839 4.55174L19.2846 4.55099L20.875 3.03449C20.9336 2.9788 21.0019 2.93591 21.0761 2.90827C21.1503 2.88063 21.2289 2.86879 21.3074 2.87342C21.3858 2.87806 21.4627 2.89907 21.5336 2.93526C21.6044 2.97146 21.6679 3.02212 21.7203 3.08437C21.7727 3.14662 21.8131 3.21922 21.8391 3.29805C21.8651 3.37687 21.8762 3.46036 21.8719 3.54376C21.8675 3.62716 21.8477 3.70883 21.8137 3.78411C21.7796 3.85939 21.7319 3.9268 21.6733 3.98249L21.6726 3.98324L20.0816 5.50199C20.0233 5.55778 19.9553 5.6008 19.8814 5.62859C19.8074 5.65638 19.7291 5.66838 19.6508 5.66392C19.5725 5.65947 19.4958 5.63863 19.4251 5.6026C19.3544 5.56658 19.291 5.51608 19.2388 5.45399L19.238 5.45324V5.44799ZM10.7152 4.95749L9.28864 3.26699C9.18277 3.14178 9.12805 2.97701 9.13652 2.80893C9.14072 2.7257 9.1603 2.64417 9.19415 2.56899C9.228 2.4938 9.27546 2.42644 9.33381 2.37074C9.39217 2.31505 9.46027 2.27211 9.53425 2.24438C9.60822 2.21665 9.6866 2.20467 9.76493 2.20913C9.92313 2.21813 10.0715 2.29353 10.1773 2.41874L10.178 2.41949L11.6032 4.11224C11.6556 4.17424 11.6961 4.24661 11.7222 4.3252C11.7483 4.4038 11.7595 4.48709 11.7553 4.57031C11.7511 4.65354 11.7316 4.73507 11.6977 4.81025C11.6639 4.88543 11.6164 4.9528 11.558 5.00849C11.4997 5.06419 11.4316 5.10713 11.3576 5.13486C11.2836 5.16259 11.2053 5.17457 11.1269 5.17011C11.0486 5.16566 10.9719 5.14485 10.9011 5.10888C10.8303 5.07292 10.7669 5.02249 10.7145 4.96049L10.7138 4.95974L10.7152 4.95749ZM15.4849 3.53774C15.3324 3.52839 15.1891 3.45763 15.084 3.33988C14.9789 3.22213 14.9201 3.06624 14.9195 2.90399L14.9202 2.86649V2.86799L15.0359 0.599995C15.0497 0.438918 15.1206 0.289446 15.2344 0.181991C15.3482 0.0745368 15.4962 0.0171715 15.6483 0.0215669C15.8005 0.0259624 15.9454 0.0917884 16.0535 0.205652C16.1616 0.319516 16.2248 0.472863 16.2303 0.634495L16.2296 0.670495V0.668995L16.1138 2.93699C16.105 3.09897 16.0384 3.25129 15.9276 3.36292C15.8168 3.47454 15.67 3.53706 15.5173 3.53774H15.4849Z"
                                  fill={`${
                                    selectedServices.includes("day-care")
                                      ? "white"
                                      : "#263542"
                                  }`}
                                  className="svg-icon-fill"
                                />
                              </g>
                              <defs>
                                <clipPath id="clip0_14239_542">
                                  <rect width="24" height="18" fill="white" />
                                </clipPath>
                              </defs>
                            </svg>

                            <p>Day Care</p>
                          </div>
                        </div>
                      </label>
                      <input
                        type="checkbox"
                        id="dog-walking"
                        name="4"
                        className="hidden-input"
                        onChange={(e) => {
                          setSelectedServices("dog-walking");
                          setSelectedServiceNames(e.target.name);
                        }}
                      />
                      <label
                        htmlFor="dog-walking"
                        className={`form-check-container ${
                          selectedServices.includes("dog-walking")
                            ? "active-form"
                            : ""
                        }`}
                      >
                        <div className="form-check-sub-container">
                          <div className="cursor-pointer">
                            <svg
                              width="24"
                              height="24"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M7.57024 15.376C9.15624 12.148 9.95024 10.534 11.0902 10.149C11.6806 9.95009 12.3199 9.95009 12.9102 10.149C14.0502 10.534 14.8442 12.148 16.4302 15.376L17.3082 17.166C17.7182 17.999 17.9222 18.416 17.9712 18.7C18.1722 19.879 17.3012 20.965 16.1252 21C15.8422 21.008 15.4002 20.887 14.5152 20.644C14.1813 20.5474 13.8445 20.461 13.5052 20.385C12.5119 20.1843 11.4885 20.1843 10.4952 20.385C10.2432 20.436 9.99024 20.505 9.48524 20.645C8.60024 20.887 8.15824 21.008 7.87524 21C6.70024 20.965 5.82824 19.879 6.02924 18.7C6.07724 18.416 6.28224 18 6.69224 17.165L7.57024 15.376ZM6.14524 5.527C6.55724 7.158 7.72124 8.244 8.74524 7.953C9.77024 7.661 10.2672 6.103 9.85524 4.473C9.44324 2.842 8.27924 1.756 7.25524 2.047C6.23024 2.339 5.73324 3.897 6.14524 5.527ZM17.8552 5.527C17.4432 7.158 16.2792 8.244 15.2552 7.953C14.2302 7.661 13.7332 6.103 14.1452 4.473C14.5572 2.842 15.7212 1.756 16.7452 2.047C17.7702 2.339 18.2672 3.897 17.8552 5.527ZM2.20224 12.297C2.65224 13.502 3.71024 14.234 4.56524 13.932C5.42024 13.63 5.74824 12.408 5.29824 11.202C4.84824 9.998 3.79024 9.266 2.93524 9.568C2.08024 9.87 1.75224 11.092 2.20224 12.298V12.297ZM21.7982 12.297C21.3482 13.502 20.2902 14.234 19.4352 13.932C18.5802 13.63 18.2522 12.408 18.7022 11.202C19.1522 9.998 20.2102 9.266 21.0652 9.568C21.9202 9.87 22.2482 11.092 21.7982 12.298V12.297Z"
                                stroke={`${
                                  selectedServices.includes("dog-walking")
                                    ? "white"
                                    : "#263542"
                                }`}
                                className="svg-icon-fill"
                                stroke-width="1.2"
                              />
                            </svg>

                            <p>Dog Walking</p>
                          </div>
                        </div>
                      </label>
                      <input
                        type="checkbox"
                        id="Pet-grooming"
                        name="5"
                        className="hidden-input"
                        onChange={(e) => {
                          setSelectedServices("pet-grooming");
                          setSelectedServiceNames(e.target.name);
                        }}
                      />
                      <label
                        htmlFor="Pet-grooming"
                        className={`form-check-container ${
                          selectedServices.includes("pet-grooming")
                            ? "active-form"
                            : ""
                        }`}
                      >
                        <div className="form-check-sub-container">
                          <div className="cursor-pointer">
                            <svg
                              width="20"
                              height="20"
                              viewBox="0 0 20 20"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                fill-rule="evenodd"
                                clip-rule="evenodd"
                                d="M14.4552 1.36083C14.5364 1.21629 14.6717 1.10993 14.8313 1.06516C14.991 1.02038 15.1619 1.04086 15.3064 1.12208C15.451 1.20331 15.5573 1.33862 15.6021 1.49826C15.6469 1.6579 15.6264 1.82879 15.5452 1.97333L10.7168 10.56L12.9735 14.5725C13.2583 13.9264 13.7535 13.3957 14.3784 13.067C15.0033 12.7382 15.7211 12.6307 16.4149 12.762C17.1087 12.8933 17.7377 13.2556 18.1993 13.7899C18.6608 14.3243 18.9279 14.9992 18.957 15.7047C18.986 16.4102 18.7753 17.1048 18.3592 17.6753C17.9431 18.2458 17.3461 18.6586 16.6655 18.8465C15.9848 19.0343 15.2606 18.9862 14.6108 18.71C13.9609 18.4337 13.4238 17.9455 13.0868 17.325L10.0002 11.835L6.9135 17.325C6.57656 17.9453 6.03953 18.4332 5.38989 18.7093C4.74024 18.9855 4.01624 19.0335 3.33581 18.8456C2.65537 18.6578 2.05859 18.2451 1.64264 17.6748C1.22669 17.1044 1.01609 16.4101 1.04513 15.7048C1.07417 14.9995 1.34114 14.3248 1.80257 13.7906C2.26399 13.2564 2.89269 12.8942 3.58627 12.7629C4.27984 12.6316 4.99744 12.739 5.62218 13.0676C6.24693 13.3962 6.74202 13.9266 7.02683 14.5725L9.2835 10.56L4.45516 1.97333C4.37394 1.82879 4.35347 1.6579 4.39824 1.49826C4.44301 1.33862 4.54937 1.20331 4.69391 1.12208C4.83846 1.04086 5.00935 1.02038 5.16899 1.06516C5.32863 1.10993 5.46394 1.21629 5.54516 1.36083L10.0002 9.285L14.4552 1.36083ZM4.16683 17.7083C4.49708 17.7085 4.82151 17.6214 5.1073 17.4559C5.39308 17.2904 5.63009 17.0523 5.79433 16.7658L5.811 16.7358C6.00883 16.3756 6.0828 15.9603 6.02155 15.5539C5.96029 15.1475 5.76719 14.7724 5.47196 14.4865C5.17673 14.2006 4.79572 14.0195 4.38756 13.9713C3.9794 13.9231 3.56669 14.0103 3.21293 14.2195C2.85918 14.4287 2.58397 14.7484 2.42966 15.1294C2.27535 15.5103 2.25048 15.9314 2.35887 16.3278C2.46727 16.7243 2.70293 17.0741 3.02959 17.3236C3.35626 17.573 3.75583 17.7082 4.16683 17.7083ZM15.8335 17.7083C15.5032 17.7085 15.1788 17.6214 14.893 17.4559C14.6072 17.2904 14.3702 17.0523 14.206 16.7658L14.1893 16.7358C13.9915 16.3756 13.9175 15.9603 13.9788 15.5539C14.04 15.1475 14.2331 14.7724 14.5284 14.4865C14.8236 14.2006 15.2046 14.0195 15.6128 13.9713C16.0209 13.9231 16.4336 14.0103 16.7874 14.2195C17.1412 14.4287 17.4164 14.7484 17.5707 15.1294C17.725 15.5103 17.7499 15.9314 17.6415 16.3278C17.5331 16.7243 17.2974 17.0741 16.9707 17.3236C16.6441 17.573 16.2445 17.7082 15.8335 17.7083Z"
                                fill={`${
                                  selectedServices.includes("pet-grooming")
                                    ? "white"
                                    : "#263542"
                                }`}
                                className="svg-icon-fill"
                              />
                            </svg>

                            <p>Pet Grooming</p>
                          </div>
                        </div>
                      </label>
                    </div>
                    {error.selectedServices && (
                      <p className="error-message">{error.selectedServices}</p>
                    )}
                  </div>
                  <div
                    className="form-check-container-parent align-items-end  d-flex "
                    style={{ gap: "1.3rem" }}
                  >
                    <div>
                      <p>Choose Location</p>
                      <div className="form-check-sub-container-loc-and-date">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 16 16"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M12.1479 11.3333C13.0779 12.6587 13.5226 13.3647 13.2579 13.9333C13.2312 13.9902 13.2001 14.0451 13.1646 14.098C12.7812 14.6667 11.7912 14.6667 9.81125 14.6667H6.18858C4.20858 14.6667 3.21925 14.6667 2.83591 14.098C2.80094 14.0454 2.76975 13.9904 2.74258 13.9333C2.47791 13.3653 2.92258 12.6587 3.85258 11.3333M9.66658 6.00001C9.66658 6.44204 9.49099 6.86596 9.17842 7.17852C8.86586 7.49108 8.44194 7.66668 7.99991 7.66668C7.55789 7.66668 7.13396 7.49108 6.8214 7.17852C6.50884 6.86596 6.33325 6.44204 6.33325 6.00001C6.33325 5.55798 6.50884 5.13406 6.8214 4.8215C7.13396 4.50894 7.55789 4.33334 7.99991 4.33334C8.44194 4.33334 8.86586 4.50894 9.17842 4.8215C9.49099 5.13406 9.66658 5.55798 9.66658 6.00001Z"
                            stroke="#C0C4C8"
                            stroke-width="1.2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M8.83799 11.6627C8.61281 11.8793 8.31248 12.0003 7.99999 12.0003C7.68751 12.0003 7.38718 11.8793 7.16199 11.6627C5.10266 9.66734 2.34333 7.43868 3.68866 4.20268C4.41733 2.45268 6.16399 1.33334 7.99999 1.33334C9.83599 1.33334 11.5833 2.45334 12.3113 4.20268C13.6553 7.43401 10.9027 9.67401 8.83799 11.6627Z"
                            stroke="#C0C4C8"
                            stroke-width="1.2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>

                        <input
                          type="search"
                          name="location"
                          onChange={(e) => setLocation(e.target.value)}
                          value={location}
                          placeholder="Enter Your Location"
                        />
                      </div>
                    </div>
                    <div>
                      <p>Choose Date</p>
                      <div className="form-check-sub-container-loc-and-date">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 16 16"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M1.3335 7.99999C1.3335 5.48599 1.3335 4.22866 2.11483 3.44799C2.89616 2.66732 4.15283 2.66666 6.66683 2.66666H9.3335C11.8475 2.66666 13.1048 2.66666 13.8855 3.44799C14.6662 4.22932 14.6668 5.48599 14.6668 7.99999V9.33332C14.6668 11.8473 14.6668 13.1047 13.8855 13.8853C13.1042 14.666 11.8475 14.6667 9.3335 14.6667H6.66683C4.15283 14.6667 2.8955 14.6667 2.11483 13.8853C1.33416 13.104 1.3335 11.8473 1.3335 9.33332V7.99999Z"
                            stroke="#C0C4C8"
                            strokeWidth="1.2"
                          />
                          <path
                            d="M4.66699 2.66666V1.66666M11.3337 2.66666V1.66666M1.66699 5.99999H14.3337"
                            stroke="#C0C4C8"
                            strokeWidth="1.2"
                            strokeLinecap="round"
                          />
                          <path
                            d="M12 11.3333C12 11.5101 11.9298 11.6797 11.8047 11.8047C11.6797 11.9298 11.5101 12 11.3333 12C11.1565 12 10.987 11.9298 10.8619 11.8047C10.7369 11.6797 10.6667 11.5101 10.6667 11.3333C10.6667 11.1565 10.7369 10.987 10.8619 10.8619C10.987 10.7369 11.1565 10.6667 11.3333 10.6667C11.5101 10.6667 11.6797 10.7369 11.8047 10.8619C11.9298 10.987 12 11.1565 12 11.3333ZM12 8.66667C12 8.84348 11.9298 9.01305 11.8047 9.13807C11.6797 9.2631 11.5101 9.33333 11.3333 9.33333C11.1565 9.33333 10.987 9.2631 10.8619 9.13807C10.7369 9.01305 10.6667 8.84348 10.6667 8.66667C10.6667 8.48986 10.7369 8.32029 10.8619 8.19526C10.987 8.07024 11.1565 8 11.3333 8C11.5101 8 11.6797 8.07024 11.8047 8.19526C11.9298 8.32029 12 8.48986 12 8.66667ZM8.66667 11.3333C8.66667 11.5101 8.59643 11.6797 8.4714 11.8047C8.34638 11.9298 8.17681 12 8 12C7.82319 12 7.65362 11.9298 7.5286 11.8047C7.40357 11.6797 7.33333 11.5101 7.33333 11.3333C7.33333 11.1565 7.40357 10.987 7.5286 10.8619C7.65362 10.7369 7.82319 10.6667 8 10.6667C8.17681 10.6667 8.34638 10.7369 8.4714 10.8619C8.59643 10.987 8.66667 11.1565 8.66667 11.3333ZM8.66667 8.66667C8.66667 8.84348 8.59643 9.01305 8.4714 9.13807C8.34638 9.2631 8.17681 9.33333 8 9.33333C7.82319 9.33333 7.65362 9.2631 7.5286 9.13807C7.40357 9.01305 7.33333 8.84348 7.33333 8.66667C7.33333 8.48986 7.40357 8.32029 7.5286 8.19526C7.65362 8.07024 7.82319 8 8 8C8.17681 8 8.34638 8.07024 8.4714 8.19526C8.59643 8.32029 8.66667 8.48986 8.66667 8.66667ZM5.33333 11.3333C5.33333 11.5101 5.2631 11.6797 5.13807 11.8047C5.01305 11.9298 4.84348 12 4.66667 12C4.48986 12 4.32029 11.9298 4.19526 11.8047C4.07024 11.6797 4 11.5101 4 11.3333C4 11.1565 4.07024 10.987 4.19526 10.8619C4.32029 10.7369 4.48986 10.6667 4.66667 10.6667C4.84348 10.6667 5.01305 10.7369 5.13807 10.8619C5.2631 10.987 5.33333 11.1565 5.33333 11.3333ZM5.33333 8.66667C5.33333 8.84348 5.2631 9.01305 5.13807 9.13807C5.01305 9.2631 4.84348 9.33333 4.66667 9.33333C4.48986 9.33333 4.32029 9.2631 4.19526 9.13807C4.07024 9.01305 4 8.84348 4 8.66667C4 8.48986 4.07024 8.32029 4.19526 8.19526C4.32029 8.07024 4.48986 8 4.66667 8C4.84348 8 5.01305 8.07024 5.13807 8.19526C5.2631 8.32029 5.33333 8.48986 5.33333 8.66667Z"
                            fill="#C0C4C8"
                          />
                        </svg>

                        <Calendar
                          value={dateData}
                          onChange={(e) => {
                            setDateData(e.value);
                            setError({ ...error, date: "" });
                          }}
                          minDate={new Date()}
                          className="date-picker"
                          placeholder="Select a date"
                          dateFormat="mm/dd/yy" // Adjust format to fit your DateFormater function
                        />
                      </div>
                    </div>
                    <button
                      type="submit"
                      className="navBtn search-btn-for-hero-section flex-2 btn-3d"
                      disabled={loading}
                    >
                      <span className="front search-btn button-hover">
                        {" "}
                        {loading && (
                          <svg
                            width={"16"}
                            height={"16"}
                            viewBox="25 25 50 50"
                            className="loading-spinner"
                          >
                            <circle r="20" cy="50" cx="50"></circle>
                          </svg>
                        )}
                        {!loading && (
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 16 16"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M7.33333 12.6665C10.2789 12.6665 12.6667 10.2787 12.6667 7.33318C12.6667 4.38766 10.2789 1.99985 7.33333 1.99985C4.38781 1.99985 2 4.38766 2 7.33318C2 10.2787 4.38781 12.6665 7.33333 12.6665Z"
                              stroke="white"
                              stroke-width="1.4"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                            <path
                              d="M14 13.9998L11.1333 11.1332"
                              stroke="white"
                              stroke-width="1.4"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                        )}
                        {loading ? "Loading..." : "Search Now"}
                      </span>
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
          <div className="col-md-12 g-0 col-lg-6 col-xl-6 col-sm-12 custom-width">
            <div className="banner-img-wrapper">
              <div
                className="relative-imgs-2"
                // data-aos="fade-left"
                // data-aos-offset="0"
                // data-aos-easing="ease-in-sine"
                // data-aos-duration="1000"
              >
                <img
                  src={AvatarLogo}
                  loading="lazy"
                  className="absolute-svg img-fluid"
                  alt="in hero section avatar logo"
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

export default HeroSection;
